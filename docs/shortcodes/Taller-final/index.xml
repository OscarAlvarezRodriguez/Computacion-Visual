<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Fotomosaico-Hardware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Fotomosaico-Hardware/</guid><description>Taller Final # Fotomosaico - Hardware # En el campo de las imágenes y la fotografía, un fotomosaico es una imagen usualmente una fotografía que ha sido dividida en secciones rectangulares (usualmente del mismo tamaño), tal como es compuesto un mosaico tradicional, con la característica de que cada elemento del mosaico es reemplazado por otra fotografía con colores promedios apropiados al elemento de la imagen original. Cuando es vista en detalle, los píxeles individuales se ven como la imagen principal, sin embargo al verla como un todo, es posible apreciar que la imagen está compuesta por cientos de miles de imágenes.</description></item><item><title/><link>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Fotomosaicos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Fotomosaicos/</guid><description>Espacio de oscar # Primer tarea # Ilusión óptica - Conexión diagonal de los puntos de intersección #</description></item><item><title/><link>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Interfaz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Interfaz/</guid><description>Interfaz # let input; let img; function setup() { input = createFileInput(handleFile); input.position(20, 20); } function draw() { background(255); if (img) { image(img, 0, 0, width, height); } } function handleFile(file) { print(file); if (file.type === &amp;#39;image&amp;#39;) { img = createImg(file.data, &amp;#39;&amp;#39;); img.hide(); } else { img = null; } } "</description></item><item><title/><link>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Webcrawler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://oscaralvarezrodriguez.github.io/Computacion-Visual/docs/shortcodes/Taller-final/Webcrawler/</guid><description>WebCrawler # package crawer; import java.io.BufferedOutputStream; import java.io.File; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.UnsupportedEncodingException; import java.net.MalformedURLException; import java.net.URL; import java.net.URLConnection; import java.net.URLEncoder; import org.jsoup.Connection; import org.jsoup.Jsoup; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.select.Elements; public class meizi { /** * Download the picture to the specified directory * * @param filePath File path * @param imgUrl Picture URL */ public static void downImages(String filePath, String imgUrl) { // If the specified folder does not exist, create it first File dir = new File(filePath); if (!</description></item></channel></rss>